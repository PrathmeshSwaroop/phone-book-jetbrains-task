type: edu
custom_name: stage4
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.v6.stage.BaseStageTest;\nimport org.hyperskill.hstest.v6.testcase.CheckResult;\n\
    import org.hyperskill.hstest.v6.testcase.TestCase;\nimport phonebook.MainKt;\n\
    \nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends BaseStageTest {\n    public PhoneBookTest() {\n      \
    \  super(MainKt.class);\n    }\n    \n    private long timeOnTestStart;\n    \n\
    \    @Override\n    public List<TestCase> generate() {\n        timeOnTestStart\
    \ = System.currentTimeMillis();\n        return Arrays.asList(\n            new\
    \ TestCase().setTimeLimit(30 * 60 * 1000)\n        );\n    }\n    \n    \n   \
    \ private CheckResult checkPhrases(String reply, String... phrases) {\n      \
    \  reply = reply.toLowerCase();\n        for (String phrase : phrases) {\n   \
    \         if (!reply.contains(phrase.toLowerCase())) {\n                return\
    \ CheckResult.FALSE(\"Not found the part `\" + phrase + \"` in your output.\"\
    );\n            }\n        }\n        return CheckResult.TRUE;\n    }\n    \n\
    \    private List<String> findAll(String reply, String regex) {\n        Matcher\
    \ matcher = Pattern.compile(regex).matcher(reply);\n        List<String> groups\
    \ = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.FALSE(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.FALSE(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.FALSE(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.FALSE(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.FALSE(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.FALSE(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n    \n        if (Math.abs(estimatedTime\
    \ - realTime) > 1000) {\n            return CheckResult.FALSE(\"Your estimated\
    \ time is not similar to real time the program works. \" +\n                 \
    \   \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime + \"\
    ms\");\n        }\n        \n        if (t8 >= t5) {\n            return CheckResult.FALSE(\"\
    Your hashtable works slower, than quick sort + binary search.\");\n        }\n\
    \        return CheckResult.TRUE;\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: src/phonebook/sort/IListSorter.kt
  visible: true
  text: |-
    package phonebook.sort

    interface IListSorter<in T, out R> {
        companion object {
            const val SUCCESS = "SUCCESS"
            const val FAILURE = "FAILURE"
        }

        fun performSort(list: T): R
    }
  learner_created: true
- name: src/phonebook/data/Record.kt
  visible: true
  text: |-
    package phonebook.data

    data class Record(val name: String, val number: String)
  learner_created: true
- name: src/phonebook/data/QueryParser.kt
  visible: true
  text: |-
    package phonebook.data

    import java.io.File
    import java.util.*

    class QueryParser : IFileParser<MutableList<String>> {
        override fun getParsedData(filePath: String): MutableList<String> {
            val queries = LinkedList<String>()
            val findScanner = Scanner(File(filePath))
            while (findScanner.hasNextLine()) {
                queries.add(findScanner.nextLine())
            }
            return queries
        }
    }
  learner_created: true
- name: src/phonebook/data/PhoneBookParser.kt
  visible: true
  text: |-
    package phonebook.data

    import java.io.File
    import java.util.*
    import kotlin.collections.ArrayList

    class PhoneBookParser : IFileParser<MutableList<Record>> {
        override fun getParsedData(filePath: String): MutableList<Record> {
            val scanner = Scanner(File(filePath))
            val phoneBook: MutableList<Record> = LinkedList()
            while (scanner.hasNextLine()) {
                val inputArray = scanner.nextLine().split(' ')
                var phoneNumber = ""
                var name = ""
                for (i in inputArray.indices) {
                    if (i == 0) {
                        phoneNumber = inputArray[i]
                    } else {
                        name = name.plus(inputArray[i]).plus(" ")
                    }
                }
                phoneBook.add(Record(name.trim(), phoneNumber.trim()))
            }
            return phoneBook
        }
    }
  learner_created: true
- name: src/phonebook/search/JumpSearch.kt
  visible: true
  text: |-
    package phonebook.search

    import phonebook.application.compareStrings
    import phonebook.data.Record
    import kotlin.math.sqrt

    class JumpSearch(override val searchQueries: MutableList<String>,
                     override val phoneBook: MutableList<Record>
    ) : ISearch<Record, String> {
        override fun performSearch(): Int {
            val bucketSize = sqrt(phoneBook.size.toDouble()).toInt()
            val remainingElements = phoneBook.size % bucketSize
            var entriesFound = 0
            for (name in searchQueries) {
                if (foundUsingJump(name, bucketSize, remainingElements)) {
                    entriesFound++
                }
            }
            return entriesFound
        }

        private fun foundUsingJump(name: String, bucketSize: Int, remainingElements: Int): Boolean {
            var index = 0
            var comparision = name.compareStrings(phoneBook[index].name)
            when {
                comparision < 0 -> {
                    return false
                }
                comparision == 0 -> {
                    return true
                }
                else -> {
                    index += bucketSize
                    while (index <= phoneBook.lastIndex) {
                        comparision = name.compareStrings(phoneBook[index].name)
                        if (comparision < 0) {
                            var counter = index
                            while (counter >= 0 && counter >= index - bucketSize) {
                                if (name.compareStrings(phoneBook[counter].name) == 0) {
                                    return true
                                }
                                counter--
                            }
                            return false
                        } else if (comparision == 0) {
                            return true
                        } else {
                            index += bucketSize
                        }
                    }
                    for (i in phoneBook.lastIndex downTo (phoneBook.lastIndex - remainingElements)) {
                        comparision = name.compareStrings(phoneBook[i].name)
                        if (comparision == 0) {
                            return true
                        } else if (comparision > 0) {
                            return false
                        }
                    }
                    return false
                }
            }
        }
    }
  learner_created: true
- name: src/phonebook/application/Extensions.kt
  visible: true
  text: |-
    package phonebook.application

    fun String.compareStrings(rhs: String): Int {
        val length = if (length < rhs.length) length else rhs.length
        for (i in 0 until length) {
            if (this[i] != rhs[i]) {
                return this[i] - rhs[i]
            }
        }
        return (length - rhs.length)
    }
  learner_created: true
- name: src/phonebook/search/BinarySearch.kt
  visible: true
  text: |-
    package phonebook.search

    import phonebook.application.compareStrings
    import phonebook.data.Record

    class BinarySearch(override val searchQueries: MutableList<String>,
                       override val phoneBook: MutableList<Record>
    ) : ISearch<Record, String> {
        override fun performSearch(): Int {
            var entriesFound = 0
            for (name in searchQueries) {
                if (foundUsingBinary(name, 0, phoneBook.lastIndex)) {
                    entriesFound++
                }
            }
            return entriesFound
        }

        private fun foundUsingBinary(name: String, startIndex: Int, lastIndex: Int): Boolean {
            if (startIndex >= lastIndex) {
                return (name.compareStrings(phoneBook[lastIndex].name) == 0)
            }
            val mid = (startIndex + lastIndex) / 2
            val comparisionValue = name.compareStrings(phoneBook[mid].name)
            if (comparisionValue < 0) {
                return foundUsingBinary(name, startIndex, mid)
            } else if (comparisionValue > 0) {
                return foundUsingBinary(name, mid + 1, lastIndex)
            }
            return true
        }
    }
  learner_created: true
- name: src/phonebook/search/ISearch.kt
  visible: true
  text: |-
    package phonebook.search

    interface ISearch<T, U> {
        val searchQueries: MutableList<U>
        val phoneBook: MutableList<T>
        fun performSearch(): Int
    }
  learner_created: true
- name: src/phonebook/sort/BubbleSort.kt
  visible: true
  text: |-
    package phonebook.sort

    import phonebook.application.compareStrings
    import phonebook.data.Record

    class BubbleSort(private val linearSearchTime: Long) : IListSorter<MutableList<Record>, Triple<String, MutableList<Record>, Long>> {
        override fun performSort(list: MutableList<Record>): Triple<String, MutableList<Record>, Long> {
            val startTime = System.currentTimeMillis()
            var status = IListSorter.SUCCESS
            outer@ for (i in list.indices) {
                for (j in 0 until list.lastIndex - i) {
                    val difference = System.currentTimeMillis() - startTime
                    if (difference < (10000 * linearSearchTime)) {
                        val comparision = list[j].name.compareStrings(list[j + 1].name)
                        if (comparision > 0) {
                            val temp = list[j + 1]
                            list[j + 1] = list[j]
                            list[j] = temp
                        }
                    } else {
                        status = IListSorter.FAILURE
                        break@outer
                    }
                }
            }
            return Triple(status, list, (System.currentTimeMillis() - startTime))
        }
    }
  learner_created: true
- name: src/phonebook/search/LinearSearch.kt
  visible: true
  text: |-
    package phonebook.search

    import phonebook.data.Record

    class LinearSearch(override val searchQueries: MutableList<String>,
                       override val phoneBook: MutableList<Record>) : ISearch<Record, String> {

        override fun performSearch(): Int {
            var entriesFound = 0
            for (name in searchQueries) {
                if (searchFor(name, phoneBook)) {
                    entriesFound++
                }
            }
            return entriesFound
        }

        private fun searchFor(name: String?, phoneBook: MutableList<Record>): Boolean {
            if (name.isNullOrBlank()) {
                return false
            }
            phoneBook.forEach {
                if (it.name == name) {
                    //println("${it.number} ${it.name}")
                    return true
                }
            }
            return false
        }
    }
  learner_created: true
- name: src/phonebook/data/IFileParser.kt
  visible: true
  text: |-
    package phonebook.data

    interface IFileParser<out T> {
        fun getParsedData(filePath: String): T
    }
  learner_created: true
- name: src/phonebook/sort/QuickSort.kt
  visible: true
  text: |-
    package phonebook.sort

    import phonebook.application.compareStrings
    import phonebook.data.Record

    class QuickSort : IListSorter<MutableList<Record>, Triple<String, MutableList<Record>, Long>> {
        override fun performSort(list: MutableList<Record>): Triple<String, MutableList<Record>, Long> {
            val startTime = System.currentTimeMillis()
            val status = IListSorter.SUCCESS
            performOperation(list, 0, list.lastIndex)
            return Triple(status, list, (System.currentTimeMillis() - startTime))
        }

        private fun performOperation(list: MutableList<Record>, startIndex: Int, lastIndex: Int) {
            if (startIndex >= lastIndex) {
                return
            }
            var pivot = (startIndex + lastIndex) / 2
            var i = 0
            while (i <= lastIndex) {
                var temp: Record
                if (i < pivot && list[pivot].name.compareStrings(list[i].name) < 0) {
                    temp = list[i]
                    list[i] = list[pivot]
                    list[pivot] = temp
                    pivot = i
                } else if (i > pivot && list[pivot].name.compareStrings(list[i].name) > 0) {
                    temp = list[pivot]
                    list[pivot] = list[i]
                    list[i] = list[pivot + 1]
                    list[pivot + 1] = temp
                    pivot += 1
                }
                i += 1
            }
            performOperation(list, startIndex, pivot - 1)
            performOperation(list, pivot + 1, lastIndex)
        }
    }
  learner_created: true
- name: src/phonebook/data/CustomMap.kt
  visible: true
  learner_created: true
- name: src/phonebook/data/CustomHashMap.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/479/implement
status: Solved
record: 3
